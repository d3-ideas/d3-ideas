{
  "name": "geojson-validation",
  "version": "0.1.4",
  "description": "A GeoJSON Validation Library",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "devDependencies": {
    "mocha": "~1.12.0"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/craveprogramminginc/GeoJSON-Validation.git"
  },
  "homepage": "https://github.com/craveprogramminginc/GeoJSON-Validation",
  "keywords": [
    "GeoJSON",
    "Validation",
    "Geo"
  ],
  "author": {
    "name": "null_radix",
    "email": "null_radix@riseup.net"
  },
  "license": "LGPL-3",
  "readme": "GeoJSON-Validation\n==================\n\n**A GeoJSON Validation Library**  \nCheck JSON objects to see whether or not they are valid GeoJSON. Validation is based off of the [GeoJSON Format Specification revision 1.0](http://geojson.org/geojson-spec.html#geojson-objects)\n\n## Installation\n`npm install geojson-validation`\n\n## Functions\nAll Function return a boolean and take a JSON object that will be evalatued to see if it is a GeoJSON object, with the exception of [define](#definetype-function).  \n\n**Arguments**  \n* geoJSON - a JSON object that is tested to see if it is a valid GeoJSON object\n* callback(boolean, errors) - `errors` is an array of validation errors for an invalid JSON object \n\n### valid(geoJSON, callback)  \n**Alias:** isGeoJSONObject  \nChecks if an object is a [GeoJSON Object](http://geojson.org/geojson-spec.html#geojson-objects).\n\n### isGeoJSONObject(geoJSON, callback)\nChecks if an object is a [GeoJSON Object](http://geojson.org/geojson-spec.html#geojson-objects).\n\n### isGeometryObject(geoJSON, callback)\nChecks if an object is a [Geometry Object](http://geojson.org/geojson-spec.html#geometry-objects)\n\n### isPosition(array, callback)\nChecks if an array is a [Position](http://geojson.org/geojson-spec.html#positions)\n\n### isPoint(geoJSON, callback)\nChecks if an object is a [Point](http://geojson.org/geojson-spec.html#point)\n\n### isMultiPointCoor(array, callback)\nChecks if an array can be interperted as coordinates for a MultiPoint\n\n### isMultiPoint(geoJSON, callback)\nChecks if an object is a [MultiPoint](http://geojson.org/geojson-spec.html#multipoint)\n\n### isLineStringCoor(array, callback)\nChecks if an array can be interperted as coordinates for a LineString\n\n### isLineString(geoJSON, callback)\nChecks if an object is a [Line String](http://geojson.org/geojson-spec.html#linestring)\n\n### isMultiLineStringCoor(array, callback)\nChecks if an array can be interperted as coordinates for a MultiLineString\n\n### isMultiLineString(geoJSON, callback)\nChecks if an object is a [MultiLine String](http://geojson.org/geojson-spec.html#multilinestring)\n\n### isPolygonCoor(array, callback)\nChecks an array can be interperted as coordinates for a Polygon\n\n### isPolygon(geoJSON, callback)\nChecks if an object is a [Polygon](http://geojson.org/geojson-spec.html#polygon)\n\n### isMultiPolygonCoor(array, callback)\nChecks if an array can be interperted as coordinates for a MultiPolygon\n\n### isMultiPolygon(geoJSON, callback)\nChecks if an object is a [MultiPolygon](http://geojson.org/geojson-spec.html#multipolygon)\n\n### isGeometryCollection(geoJSON, callback)\nChecks if an object is a [Geometry Collection](http://geojson.org/geojson-spec.html#geometry-collection)\n\n### isFeature(geoJSON, callback)\nChecks if an object is a [Feature Object](http://geojson.org/geojson-spec.html#feature-objects)\n\n### isFeatureCollection(geoJSON, callback)\nChecks if an object is a [Feature Collection Object](http://geojson.org/geojson-spec.html#feature-collection-objects)\n\n### isBbox(array, callback)\nChecks if an object is a [Bounding Box](http://geojson.org/geojson-spec.html#bounding-boxes)\n\n### Define(type, function)\nDefine a Custom Validation for the give `type`. `type` can be \"Feature\", \"FeatureCollection\", \"Point\", \"MultiPoint\", \"LineString\", \"MultiLineString\", \"Polygon\", \"MultiPolygon\", \"GeometryCollection\", \"Bbox\", \"Position\", \"GeoJSON\" or \"GeometryObject\". \n\nThe `function` is passed the `object` being validated and should return a `string` or an `array` of  strings representing errors. If there are no errors then the function should not return anything or an empty array. See the [example](#define-example) for more.\n\n## Example\n```javascript\nGJV = require(\"geojson-validation\");\n\nvar validFeatureCollection = {\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [102.0, 0.5]},\n            \"properties\": {\"prop0\": \"value0\"}\n        },\n        {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": \"LineString\",\n                \"coordinates\": [\n                    [102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0]\n                ]\n            },\n            \"properties\": {\n                \"prop0\": \"value0\",\n                \"prop1\": 0.0\n            }\n        }\n    ]\n};\n\n//simple test\nif(GJV.valid(validFeatureCollection)){\n    console.log(\"this is valid GeoJSON!\");\n}\n\nvar invalidFeature =  {\n    \"type\": \"feature\",\n    \"geometry\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [\n            [102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0]\n        ]\n    },\n    \"properties\": {\n        \"prop0\": \"value0\",\n        \"prop1\": 0.0\n    }\n};\n\n//test to see if `invalidFeature` is valid\nGJV.isFeature(invalidFeature, function(valid, errs){\n    //log the errors\n    if(!valid){\n    console.log(errs);\n    }\n});\n```\n\n## Define Example\nShout out to [@VitoLau](https://github.com/VitoLau>) for the code! Thanks!\n```javascript\nGJV = require(\"geojson-validation\");\n\nGJV.define(\"Position\", function(position){\n    //the postion must be valid point on the earth, x between -180 and 180\n    errors = [];\n    if(position[0] < -180 || position[0] > 180){\n        errors.push(\"the x must be between -180 and 180\");\n    }\n    if(position[1] < -90 || position[1] > 90){\n        errors.push(\"the y must be between -90 and 90\");\n    }\n    return errors;\n\n});\n\ngj = {type: \"Point\", coordinates: [-200,3]};\n//returns false\nGJV.isPoint(gj);\n```\n\n## Testing\nTo run tests `npm test`   \nTest use mocha\n\n## Cavets\n* Does not check ordering of Bouding Box coordinates\n* Does not check Coordinate Reference System Objects\n* Does not check order of rings for polygons with multiple rings\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/craveprogramminginc/GeoJSON-Validation/issues"
  },
  "_id": "geojson-validation@0.1.4",
  "dist": {
    "shasum": "a407a985329cfe440dda142e827ac0ef2188ce28"
  },
  "_from": "geojson-validation@",
  "_resolved": "https://registry.npmjs.org/geojson-validation/-/geojson-validation-0.1.4.tgz"
}
